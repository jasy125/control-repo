

<#
Order of services Down

   puppet resource service puppet ensure=stopped
   puppet resource service pe-puppetserver ensure=stopped
   puppet resource service pe-activemq ensure=stopped
   puppet resource service mcollective ensure=stopped
   puppet resource service pe-puppetdb ensure=stopped
   puppet resource service pe-postgresql ensure=stopped
   puppet resource service pe-console-services ensure=stopped
   puppet resource service pe-nginx ensure=stopped
   puppet resource service pe-orchestration-services ensure=stopped


Order of services Up

    puppet resource service pe-postgresql ensure=running
    puppet resource service pe-puppetserver ensure=running
    puppet resource service pe-activemq ensure=running
    puppet resource service mcollective ensure=running
    puppet resource service pe-puppetdb ensure=running
    puppet resource service pe-console-services ensure=running
    puppet resource service pe-nginx ensure=running
    puppet resource service pe-orchestration-services ensure=running
    puppet resource service puppet ensure=running

#>


declare -a arrPuppetServiceStop=("puppet" "pe-puppetserver" "pe-activemq" "mcollective" "pe-puppetdb" "pe-console-services" "pe-nginx" "pe-orchestration-services")
declare -a arrPuppetServiceStart=("pe-postgresql" "pe-puppetserver" "pe-activemq" "mcollective" "pe-puppetdb" "pe-console-services" "pe-nginx" "pe-orchestration-services" "puppet")

function puppetstop($stoppingorder) {
    foreach $service in $stoppingorder {
        echo "Attempting to stop $service"
        puppet resource service $service ensure=stopped
    }
}

function puppetstart(){
  foreach $service in $startingorder {
    echo "Attempting to start $service"
    puppet resource service $service ensure=running
  }
}

function puppetservicecheck() {
    servicechecks=("$@")
    status="$1"
    foreach $service in $servicechecks {
     do() {
       $contiue = puppet resource service $service
       wait(5)
     } while ($continue != $status)
  }
}


if($act == 'stop') {

   puppetstop($arrPuppetServicesStop)
   

} else if ($act == 'start') {

   puppetstart($arrPuppetServiceStart)


} else if ($act == 'restart') {
    
    puppetstop($arrPuppetServicesStop)

    $continue = puppetservicecheck($arrPuppetServicesStop,"stopped")
    if ($contine == true) {
      puppetstart($arrPuppetServiceStart)
    } else {
      echo "Something went wrong try doing the manual steps"
      echo" Stop the services :
            puppet resource service puppet ensure=stopped
            puppet resource service pe-puppetserver ensure=stopped
            puppet resource service pe-activemq ensure=stopped
            puppet resource service mcollective ensure=stopped
            puppet resource service pe-puppetdb ensure=stopped
            puppet resource service pe-postgresql ensure=stopped
            puppet resource service pe-console-services ensure=stopped
            puppet resource service pe-nginx ensure=stopped
            puppet resource service pe-orchestration-services ensure=stopped
            
            Start the services :
            puppet resource service pe-postgresql ensure=running
            puppet resource service pe-puppetserver ensure=running
            puppet resource service pe-activemq ensure=running
            puppet resource service mcollective ensure=running
            puppet resource service pe-puppetdb ensure=running
            puppet resource service pe-console-services ensure=running
            puppet resource service pe-nginx ensure=running
            puppet resource service pe-orchestration-services ensure=running
            puppet resource service puppet ensure=running
          "
    }
} else { 
    echo "Not a valid value, accepted paramters is stop, start and restart"
}






#!/bin/bash
declare -a arrPuppetServiceStop=("puppet" "pe-puppetserver" "pe-activemq" "mcollective" "pe-puppetdb" "pe-console-services" "pe-nginx" "pe-orchestration-services")
declare -a arrPuppetServiceStart=("pe-postgresql" "pe-puppetserver" "pe-activemq" "mcollective" "pe-puppetdb" "pe-console-services" "pe-nginx" "pe-orchestration-services" "puppet")

function puppetstop(){
    servicesarr=("$@")
    for service in ${servicesarr[@]}
        do
           echo "Attempting to stop $service"
           puppet resource service $service ensure=stopped
         done
}


function puppetstart(){
    servicesarr=("$@")
    for service in ${servicesarr[@]}
        do
           echo "Attempting to start $service"
           puppet resource service $service ensure=running
         done
}

function puppetstatuscheck(){
    servicesarr=("$@")
    status=("$1")
    for service in ${servicesarr[@]}
        do
           echo "Checking status of $service"
           puppet resource service pe-puppetserver | grep ensure | sed -e 's|[",'\'']||g' | awk '{split($0,s," "); print s[3];}'
         done
}

state="$1"
echo $state

case "$state" in
   stop)
      echo "Trigger Stop action"
      puppetstop "${arrPuppetServiceStop[@]}"
      ;;
   start)
       echo "Trigger Start Action"
       puppetstart "${arrPuppetServiceStart[@]}"
       ;;
    check)
       echo "checking"
       puppetstatuscheck "${arrPuppetServiceStop[@]}"
       ;;
    *)
     echo "Only accepts Stop and Start"
     exit 1
esac

# puppetstop "${arrPuppetServiceStop[@]}"